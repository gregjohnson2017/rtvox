#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D img;

layout(set = 0, binding = 1) uniform CameraInfo {
    vec3 eye;
    float fov;
    vec3 target;
} uniforms;

vec3 calculate_ray() {
    float x = float(gl_GlobalInvocationID.x);
    float y = float(gl_GlobalInvocationID.y);
    float k = float(gl_NumWorkGroups.x * gl_WorkGroupSize.x);
    float m = float(gl_NumWorkGroups.y * gl_WorkGroupSize.y);
    vec3 E = uniforms.eye;
    vec3 T = uniforms.target;
    vec3 v = vec3(0.0, 1.0, 0.0);
    float theta = uniforms.fov;

    vec3 t = T - E;
    vec3 t_n = normalize(t);
    vec3 b = cross(t, v);
    vec3 b_n = normalize(b);
    vec3 v_n = cross(t_n, b_n);

    float g_x = tan(theta / 2.0);
    float g_y = g_x * (m - 1.0) / (k - 1.0);

    vec3 q_x = 2.0 * g_x * b_n / (k - 1.0);
    vec3 q_y = 2.0 * g_y * v_n / (m - 1.0);
    vec3 p_1m = t_n - g_x * b_n - g_y * v_n;

    vec3 p_ij = p_1m + q_x * (x - 1.0) + q_y * (y - 1.0);
    vec3 ray = normalize(p_ij);

    return ray;
}

bool calculate_sphere_intersect(vec3 ray) {
    vec3 o = uniforms.eye;
    vec3 c = vec3(0.0, 0.0, -5.0);
    float r = 1.0;

    float delta = pow(dot(ray, (o - c)), 2.0) - pow(length(o - c), 2.0) + pow(r, 2.0);
    float d = -1.0 * dot(ray, (o - c)) + sqrt(delta);

    return d > 0;
}

void main() {
    float x = float(gl_GlobalInvocationID.x);
    float y = float(gl_GlobalInvocationID.y);

    vec3 ray = calculate_ray();
    bool hit = calculate_sphere_intersect(ray);

    if (hit) {
        imageStore(img, ivec2(x, y), vec4(1.0, 1.0, 1.0, 0));
    } else {
        imageStore(img, ivec2(x, y), vec4(0.0, 0.0, 0.0, 0));
    }
}
